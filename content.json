{"meta":{"title":"Writer, IT blog","subtitle":"Wonmo Yang, IT BLog","description":"Wonmo Yang, IT BLog","author":"Wonmo Yang","url":"http://wonmoyang.github.io"},"pages":[{"title":"ABOUT WMYANG","date":"2017-04-13T06:24:14.000Z","updated":"2017-04-24T01:39:23.436Z","comments":true,"path":"about/index.html","permalink":"http://wonmoyang.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"JHipster 설정","slug":"jhipster_config","date":"2017-04-25T04:12:08.000Z","updated":"2017-04-28T04:02:02.205Z","comments":true,"path":"2017/04/25/jhipster_config/","link":"","permalink":"http://wonmoyang.github.io/2017/04/25/jhipster_config/","excerpt":"","text":"JHipster 설치에 관한 내용은 참고!목차 JHipster IDE 설정 (eclipse) JHipster IDE 설정 (eclipse) Make my changes Fix bug Improve formatting Make the headings bigger Push my commits to GitHub Open a pull request Describe my changes Mention all the members of my team Ask for feedback","categories":[{"name":"Development","slug":"Development","permalink":"http://wonmoyang.github.io/categories/Development/"},{"name":"Spring","slug":"Development/Spring","permalink":"http://wonmoyang.github.io/categories/Development/Spring/"}],"tags":[{"name":"JHipster","slug":"JHipster","permalink":"http://wonmoyang.github.io/tags/JHipster/"}]},{"title":"JHipster 설치","slug":"jhipster_install","date":"2017-04-24T02:25:53.000Z","updated":"2017-04-28T04:02:02.290Z","comments":true,"path":"2017/04/24/jhipster_install/","link":"","permalink":"http://wonmoyang.github.io/2017/04/24/jhipster_install/","excerpt":"","text":"JHipster란?Jhipster는 Yeoman진영에서 개발된 Angularjs + Spring boot기반의 어플리케이션 프로젝트이다. 클라이언트, 서버측 기술들을 일일이 나열하기 힘들정도로 방대하게 제공해주고 유용한 툴이나 제공되는 개발환경 세팅이 잘되어있다. 자세한 설명은 jhipster 사이트를 참고! 목차 JHipster 설치 (NPM) JHipster 설치 (NPM)Java, Nodejs, Git등 설치가 필요하지만 여기선.. 생략 :) 12345## NPM Update (권장)$ npm install -g npm## Install Yeoman$ npm install -g npm AngluarJS 1을 설치 할 경우만 실행123456# install bower (only angularjs 1)$ npm install -g bower# install gulk-cli (only angularjs 1)# gulp를 이전버전으로 설치한경우 npm rm -g gulp을 실행하여 이전 버전이 gulp-cli와 충돌하지 않도록함.$ npm install -g gulp-cli install이 완료되면 마지막으로 jhipster 설치12# install JHipster$ npm install -g generator-jhipster JHipster 프로젝트 생성12345# init JHipster$ mkdir blog$ cd blog$ yo jhipster 위 커맨드를 실행하면 아래 화면이 나온다. JHipster의 기본 환경설정 선택 or 입력.123456# 어떤 유형의 어플리케이션을 만들것인지 선택(1/15) Which *type* of application would you like to create?&gt; Monolithic application (recommended for simple projects) [선택] Microservice application Microservice gateway [BETA] JHipster UAA server (for microservice OAuth2 authentication) 12# 어플리케이션 이름을 입력(2/15) What is the base name of your application? (blog) [blog] 12# JHipster Marketplace에서 다른 generator를 설치할지 여부(3/15) Would you like to install other generators from the JHipster Marketplace? [No] 12# Java 기본 Package명을 입력(4/15) What is your default Java package name? (com.mycompany.myapp) [io.github.wonmoyang] 12345# 어떤 유형의 인증을 사용할것인지 선택(5/15) Which *type* of authentication would you like to use? (Use arrow keys)&gt; HTTP Session Authentication (stateful, default Spring Security mechanism) [선택] JWT authentication (stateless, with a token) OAuth2 Authentication (stateless, with an OAuth2 server implementation) 12345# 어떤 유형의 데이터베이스를 사용할것인지 선택(6/15) Which *type* of database would you like to use? (Use arrow keys)&gt; SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL) [선택] MongoDB Cassandra 123456# 어떤 projection 데이터베이스를 사용할것인지 선택? (7/15) Which *production* database would you like to use? (Use arrow keys)&gt; MySQL [선택] MariaDB PostgreSQL Oracle (Please follow our documentation to use the Oracle proprietary driver) 12345# 어떤 개발 데이터베이스를 사용할것인짓 선택(8/15) Which *development* database would you like to use? (Use arrow keys)&gt; H2 with disk-based persistence [선택] H2 with in-memory persistence MySQL 12345# Hibernate의 2 level cache 기능을 사용하지 여부(9/15) Do you want to use Hibernate 2nd level cache? (Use arrow keys)&gt; No [선택] Yes, with ehcache (local cache, for a single node) Yes, with HazelCast (distributed cache, for multiple nodes) 1234# backupend 빌드 시스템 선택(10/15) Would you like to use Maven or Gradle for building the backend? (Userrow keys) Maven&gt; Gradle [선택] 12345678# 예외 추가설정 부분, 소셜로그인, 검색엔진, session hazelcase방식 websocket 등을 사용하려면 선택(11/15) Which other technologies would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)&gt;( ) Social login (Google, Facebook, Twitter) ( ) Search engine using Elasticsearch ( ) Clustered HTTP sessions using Hazelcast ( ) WebSockets using Spring Websocket ( ) [BETA] Asynchronous messages using Apache Kafka 1234# server side framework 선택(12/15) Which *Framework* would you like to use for the client? AngularJS 1.x&gt; [BETA] Angular 4 [선택] 12# LibSass css 전 처리기 사용여부(13/15) Would you like to use the LibSass stylesheet preprocessor for your CSS? (y/N) 12345678910# 국제화 지원여부 선택(14/15) Would you like to enable internationalization support? (Y/n)? Please choose the native language of the application? (Use arrow keys) Czech Danish Dutch&gt; English [선택] Estonian French Galician 12345# 테스트 프레임워크 선택(15/15) Besides JUnit and Karma, which testing frameworks would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)&gt;( ) Gatling ( ) Cucumber ( ) Protractor","categories":[{"name":"Development","slug":"Development","permalink":"http://wonmoyang.github.io/categories/Development/"},{"name":"Spring","slug":"Development/Spring","permalink":"http://wonmoyang.github.io/categories/Development/Spring/"}],"tags":[{"name":"JHipster","slug":"JHipster","permalink":"http://wonmoyang.github.io/tags/JHipster/"}]},{"title":"git 명령어","slug":"git_use","date":"2017-04-17T05:58:02.000Z","updated":"2017-04-28T04:02:02.165Z","comments":true,"path":"2017/04/17/git_use/","link":"","permalink":"http://wonmoyang.github.io/2017/04/17/git_use/","excerpt":"","text":"INDEX 환경설정 기본 저장소 Git TIp. 환경설정 – git을 사용하는 사용자 정보를 설정. 소스변경을 한 사용자가 누구인지하는 추적등에 필요함. Command Description git --version git 버전 확인 git config git 환경설정 Example12345678910$ git --version## git 환경변수 보기$ git config --global --list## 사용자 명 변경$ git config --global user.name \"wonmoyang\"## 사용자 메일 변경$ git config --global user.email \"yangwm89@gmail.com\"## git 메세지 color 변경$ git config --global color.ui \"auto\" 기본 – 파일 추적, 커밋, 발행 등 기본적인 명령어 Command Description git add git add명령을 통해 파일을 add해야 git이 추적을 시작한다. git status git 파일 상태 확인 (수정된 파일이나 add할 파일이 있는지 등) git commit 스테이징에 올라가있는 파일들을 커밋 git checkout 파일 변경내용 되돌리기 git reset git 파일 상태를 Unstage로 변경 Example123456789101112131415161718$ git add README # 새로 생성되거나 변경된 파일을 add. (rm으로 삭제된 파일은 제외)$ git add -u README # 이전 스테이지와 비교해서 변경된 부분만 add.$ git add -A README # git add와 git add -u를 합한 형태 (생성,수정,삭제 모든파일을 add)## git 파일 상태확인$ git status## 파일 커밋$ git commit -a ## 추적중인 모든 변경된 파일을 commit$ git commit -m \"메세지\" ## 커밋 메세지 입력 후 commit## 파일의 변경내용을 취소, 이전 커밋상태로 되돌리기.$ git checkout README$ git checkout HEAD # HEAD에 있는 정보를 기준으로 되돌림.## git add . 등으로 스테이징된 파일을 언스테이징시킴.git resetgit reset HEAD README 저장소 Command Description git init 새로운 git 저장소 생성 git clone 원격 저장소를 복제하여 저장소 생성 git remote git 저장소명, URL관리 git fetch 원격 저장소로부터 로컬을 동기화 git pull 원격 저장소로부터 로컬을 동기화하고 merge git push 원격 저장소에 변경된 내용 발행 Example1234567891011121314151617181920$ git init## example 폴더에 저장소 복제.## 폴더명 생략가능.$ git clone git://github.com/wonmoyang/example.git example# 저장소명을 출력 (기본으로 origin을 많이 씀.)$ git remote$ git remote -v # 저장소명 + URL 출력$ git remote add origin https://github.com/wonmoyang/example.git # URL을 원격저장소명으로 저장$ git remote remove origin : 원격저장소명을 삭제# 저장소 &lt;-&gt; 로컬 동기화$ git fetch# 저장소 &lt;-&gt; 로컬 동기화 + merge$ git pull# 원격저장소명이 가리키는 원격저장소로 최신 커밋상태를 업로드$ git push - u origin master Git Tip.커밋 수정하기.123git commit -m 'initial commit' git add READMEgit commit --amend","categories":[{"name":"Tool","slug":"Tool","permalink":"http://wonmoyang.github.io/categories/Tool/"},{"name":"Github","slug":"Tool/Github","permalink":"http://wonmoyang.github.io/categories/Tool/Github/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://wonmoyang.github.io/tags/Github/"}]},{"title":"Markdown 문법","slug":"markdown_grammar","date":"2017-04-13T08:30:49.000Z","updated":"2017-04-28T04:02:02.332Z","comments":true,"path":"2017/04/13/markdown_grammar/","link":"","permalink":"http://wonmoyang.github.io/2017/04/13/markdown_grammar/","excerpt":"","text":"MarkdownMarkdown은 복잡한 HTML 태그를 사용하지 않더라도 일반 텍스트만으로 문서 편집이 가능합니다. Markdown을 지원하는 환경이라면 어디서든 사용가능하고, 익숙해지면 형식화된 문서를 빠른시간에 효율적으로 작성이 가능합니다. INDEX 제목 (Headers) 글꼴 (Text Style) 인용 (Blockquotes) 코드 블럭 (Code Blocks) 인라인 코드 블럭 (Inline Code Blocks) 링크 (Links) 리스트 (Lists) 테이블 (Tables) 이미지 (Images) 제목 (Headers)– 글자앞에 #을 붙이거나 글자밑에 -, = 적용 #갯수에따라 H1 ~ H6까지 사이즈 조절 Example Output Headers ====== Headers Headers ——— Headers # H1 H1 ## H2 H2 ### H3 H3 #### H4 H4 ##### H5 H5 ###### H6 H6 글꼴 (Text Style)– 글자 양옆에 적용 Style Syntax Example Output 굵게(Bold) ** or __ **Bold Example** Bold Example 기울임(Italic) * * or _ _ _Italic Example_ Italic Example 취소선(Strikethrough) ~~ ~~ ~~Strikethrough Example~~ Strikethrough Example 인용 (Blockquotes)– &gt;를 사용하여 텍스트를 인용 Example Output &gt; Blockquotes Example Blockquotes Example &gt;&gt; Blockquotes Example Blockquotes Example Blockquotes Example 코드 블럭 (Code Block)12345echo \"code block\" &gt; codeblock.logfunction getCodeBlock() &#123; return \"code block\"&#125;public class CodeBlock()&#123; public CodeBlock();&#125; Example Output ``` [내용] ``` 12345echo “code block” &gt; codeblock.logfunction getCodeBlock() { return “code block”}public class CodeBlock(){ public CodeBlock();} ~~~ [내용] ~~~ 12345echo “code block” &gt; codeblock.logfunction getCodeBlock() { return “code block”}public class CodeBlock(){ public CodeBlock();} ```bash [내용] ``` 12345echo “code block” &gt; codeblock.logfunction getCodeBlock() { return “code block”}public class CodeBlock(){ public CodeBlock();} ```js [내용] ``` 12345echo “code block” &gt; codeblock.logfunction getCodeBlock() { return “code block”}public class CodeBlock(){ public CodeBlock();} ```java [내용] ``` 12345echo “code block” &gt; codeblock.logfunction getCodeBlock() { return “code block”}public class CodeBlock(){ public CodeBlock();} 인라인 코드 블럭 (Inline Code Block)– 글자 양옆에 `(Block Quote) 적용 Example Output `inline code block` inline code block 링크 (Link)1. 외부링크 (External Links) Type Example Output 인라인 링크 [인라인](http://wonmoyang.github.io &quot;inline&quot;) 인라인 참조 링크 [Google][1][Naver][2][1]: http://google.com “구글”[2]: http://naver.com &quot;네이버” GoogleNaver URI 링크 &lt;http://wonmoyang.github.io&gt;&lt;yangwm89@gmail.com&gt; http://wonmoyang.github.io&#x79;&#97;&#x6e;&#103;&#119;&#x6d;&#56;&#57;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d; 2. 내부링크 (Internal Links) Type Example Output 목차 링크 [목차](#index) 목차 리스트 (Lists)1. 순서 리스트 (Ordered Lists) – 1., 2.와 같이 숫자 + .을 이용하여 리스트를 구성. 번호 순서에 상관없이 출력. Example Output 3. 첫번째 리스트 4. 두번째 리스트 1. 세번째 리스트 2. 네번째 리스트 1. 첫번쨰 리스트2. 두번째 리스트3. 두번째 리스트4. 두번째 리스트 2. 글머리 리스트 (Unordered Lists) – *, +, -을(를) 이용하여 리스트를 구성. Type Example Output * * 글머리 리스트 글머리 리스트 + + 글머리 리스트 글머리 리스트 - - 글머리 리스트 글머리 리스트 - - 글머리 리스트 글머리 리스트 응용 (다단계 리스트) * 리스트 1 + 리스트 2 - 리스트 2-1 - 리스트 2-2 - 리스트 2-2-1 * 리스트 3-1 리스트 1리스트 2리스트 2-1리스트 2-2리스트 2-2-1리스트 3 테이블 (Tables) – - 와 | 을 사용하여 구성. markdown table generator에서 테이블 구성을 지원. Type Example Output 기본 테이블 &#124; column &#124; column &#124; column &#124; ——— &#124; ——— &#124; ——— &#124; row 1 &#124; row 1 &#124; row 1 columncolumncolumnrow 1row 1row 1 row 2row 2row 2 정렬 테이블 &#124; column &#124; column &#124; column &#124; :——— &#124; :———: &#124; ———: &#124; row 1 &#124; row 1 &#124; row 1 columncolumncolumnrow 1row 1row 1 row 2row 2row 2 이미지 (Images) Type Example Output 인라인 이미지 ![alt title](/images/inline_image.jpg) 링크 이미지 ![alt title](https://wonmoyang.github.io/images/link_image.jpg) 참조 이미지 ![alt title][1] [1]:/images/reference_image.png","categories":[{"name":"Blog","slug":"Blog","permalink":"http://wonmoyang.github.io/categories/Blog/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://wonmoyang.github.io/tags/Markdown/"}]}]}